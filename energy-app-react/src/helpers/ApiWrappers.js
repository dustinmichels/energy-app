// 1) For a given building, resource and timeframe, return (from API) 
//      a single value (e.g. gal/week in Burton)
// 2) Energy the windmill generated within a specified timeframe
// 3) Energy generated by solar panels within a specified timeframe
// 4) (eventually) Data over time to generate graphs


function getBuildingUsageOverTime(building, utility, timeStart, timeEnd) {
    /*
        parameter   | object type
        --------------------------
        'building'  | String 
        'utility'   | String (options for now: "electricity", "water")
        'timeStart' | Date
        'timeEnd'   | Date
    */

    // Insert real API call here

    /* RETURN DUMMY DATA (below) */

    // different utilities have different "typical" amounts
    var scaleFactor;

    if (utility == "water") {
        scaleFactor = 400;
    } else if (utility == "electricity") {
        scaleFactor = 12; 
    } 

    // calculate number of 15-min chunks b/w 'timeStart' and 'timeEnd'
    var timeframe = Math.abs(timeEnd - timeStart) / (60000 * 15); // 60,000ms per min * 15min

    return Math.random() * scaleFactor * timeframe; 

}

function getEnergyGenerationOverTime(timeStart, timeEnd, timeScale) {
    var scaleFactorWind = 400;
    var scaleFactorSolar = 2; 

    var numberEntries = Math.round(Math.abs(timeEnd - timeStart) / (60000 * timeScale));
    var currentTime = new Date(timeEnd);

    var table = new Array(numberEntries);
    for (var i = numberEntries-1; i >= 0; i--) {
        table[i] = [];
        table[i]["date"] = currentTime.toString();
        table[i]["wind"] = Math.random() * scaleFactorWind * timeframe;
        table[i]["solar"] = Math.random() * scaleFactorSolar * timeframe;
        table[i]["total"] = table[i]["wind"] + table[i]["solar"];

        currentTime.setMinutes(currentTime.getMinutes() - timeScale);
    }

    return table;
}

function getWindGenerationOverTime(timeStart, timeEnd, timeScale) {
    var totals = getEnergyGenerationOverTime(timeStart, timeEnd, timeScale);
    var table = [];
    for (var i = 0; i < totals.length; i++) {
        table[i] = [];
        table[i]["date"] = totals[i]["date"];
        table[i]["wind"] = totals[i]["wind"];
    }

    return table;
}

function getSolarGenerationOverTime(timeStart, timeEnd, timeScale) {
    var totals = getEnergyGenerationOverTime(timeStart, timeEnd, timeScale);
    var table = [];
    for (var i = 0; i < totals.length; i++) {
        table[i] = [];
        table[i]["date"] = totals[i]["date"];
        table[i]["solar"] = totals[i]["solar"];
    }

    return table;
}


function getTotalEnergyGeneration(timeStart, timeEnd) {
    // return value of how much electricity we are generating from wind/solar, etc
    // /api/generation

    // return map with one entry for "wind", one for "solar", and one for "total"

    var scaleFactorWind = 400;
    var scaleFactorSolar = 2; 

    // calculate number of 15-min chunks b/w 'timeStart' and 'timeEnd'
    var timeframe = Math.abs(timeEnd - timeStart) / (60000 * 15); // 60,000ms per min * 15min

    var table = [];
    table["wind"] = Math.random() * scaleFactorWind * timeframe;
    table["solar"] = Math.random() * scaleFactorSolar * timeframe;
    table["total"] = table["wind"] + table["solar"];

    return table;
}

function getTotalWindGeneration(timeStart, timeEnd) {
    return getTotalEnergyGeneration(timeStart, timeEnd)["wind"];
}

function getTotalSolarGeneration(timeStart, timeEnd) {
    return getTotalEnergyGeneration(timeStart, timeEnd)["solar"];
}

function getCurrentWindGeneration() {
    var timeStart = new Date();
    timeStart.setMinutes(timeStart.getMinutes() - 15);
    var timeEnd = new Date();

    return getTotalWindGeneration(timeStart, timeEnd);
}

function getCurrentSolarGeneration() {
    var timeStart = new Date();
    timeStart.setMinutes(timeStart.getMinutes() - 15);
    var timeEnd = new Date();

    return getTotalSolarGeneration(timeStart, timeEnd);
}

function getBuildingsList() {
    // return list of every building name with data (e.g. "Burton", "Sayles", etc.)
    // /api/buildings/names
}

function getBuildingUtilityConsumption(utility, building, timeStart, timeEnd) {
    // return value of how much of a resource we have consumed at one building over a time frame
    // /api/buildings/usage/{buildingName}/current?utility={resource}
}

function getCurrentBuildingUtilityConsumption(utility, building) {
    var diff = 15;  // 15 minutes
    var timeStart = new Date();
    timeStart.setMinutes(timeStart.getMinutes() - diff);

    return getBuildingUtilityConsumption(utility, building, timeStart, new Date(Date.UTC()));
}

function getUtilityConsumption(utility, timeStart, timeEnd) {
    // return total campus consumption of utitlity over specified time frame
}