/* General.js
 * Written by Liv Phillips & Veronica Child for Energy App Comps, 2018
 * Variety of general helper functions.
 */

import { Dimensions } from 'react-native';
const { width, height } = Dimensions.get('window');

/* ------ Scalers written by Nir Hadassi at Solutotlv: https://blog.solutotlv.com/size-matters/ ------- */

//Guideline sizes are based on standard ~5" screen mobile device
const guidelineBaseWidth = 350;
const guidelineBaseHeight = 680;

const scale = size => width / guidelineBaseWidth * size;
const verticalScale = size => height / guidelineBaseHeight * size;
const moderateScale = (size, factor = 0.5) => size + ( scale(size) - size ) * factor;

export {scale, verticalScale, moderateScale};

/* -------------- FUNCTIONS FOR UTILITY TEXT --------------- */

export const getUnits = (utility) => {
    var units = ""
    if (utility == 'electric') {
      units = "kWh"
    } else if (utility == 'water') {
      units = "gal"
    } else if (utility == 'heat') {
      units = "kBTU"
    } else if (utility == 'total') { 
      units = "BTUs"
    }
    return units
}


/* -------------- FUNCTIONS FOR CONVERSION TO kWh --------------- */
/*
1 Megawatt Hour (MWh) = 1,000 Kilowatt Hours (KWh)
1 Kilowatt Hour = 3,413 British Thermal Units (BTUs)
1 Metric Tonne = 2,204.6 Pounds
1 Pound = 0.00045 Metric Tonnes
1 Short Ton = 2,000 Pounds
1 Short Ton = 0.90719 Metric Tonnes
1 Therm = 100 Cubic Feet
1 CCF = Abbreviation for 100 Cubic Feet
1 CCF = 1.024 Therms
*/
// 1 hamburger is 27 lbs of carbon aka 30 miles driven
// https://www.nytimes.com/2014/07/16/opinion/the-true-cost-of-a-burger.html
// 1 kwh ~= 1 lb co2

export const convertThms = (thms) => {
    // 1 thm is 29.3001 kWh
    return thms * 29.3001;
}

export const convertKbtus = (kbtus) => {
    // 1 kBTU is 0.2930710702 kWh
    return kbtus * 0.2930710702;
}

export const convertGallons = (gallons) => {
    // 1 gallon of water used is approx 2 kWh (?)
    return gallons * 2;
}

/* ---------- GENERAL MATH FUNCTIONS ---------- */

export const roundNumberTwoDecimal = (num) => {
    return (Math.round((num + 0.00001) * 100) / 100).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

export const roundNumber = (num) => {
    return Math.round(num).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

export const getSpecificRandom = (min, max, scaleFactor, otherFactor) => {
    min = Math.ceil(min);
    max = Math.floor(max);

    temp = Math.floor(Math.random() * (max - min)) + min
    return temp * scaleFactor * otherFactor;
}


// Calculate the ratio of energy generated by wind turbines to total energy use.
export const calculateRatio = ( data ) => {
    var totalUse = combineData(data.usage);
    var totalGeneration = data.turbine[0]["y"] + data.turbine[1]["y"];

    var combinedData = new Array(2);
    combinedData[0] = {'x': 'Total Energy Use', 'y': totalUse};
    combinedData[1] = {'x': "Wind Generation", 'y': totalGeneration};

    return {'percentage': roundNumberTwoDecimal(totalGeneration/totalUse * 100), 'data': combinedData };
}

// Combine different types of data into one total number
export const combineData = (data) => {
    var dataNumber = 0;

    for (var index=0; index<data.length; index++) {
        switch (data[index]["x"]) {
            case "Gas (thm)":
                dataNumber += convertThms(data[index]["y"]);
                break;

            case "Water (gal)":
                dataNumber += convertGallons(data[index]["y"]);
                break;

            case "Heat (kBTU)":
               dataNumber += convertKbtus(data[index]["y"]);
               break;
            default:
                dataNumber += data[index]["y"];
                break;
        }
    }

    return dataNumber;
}